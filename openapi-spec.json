{
  "openapi": "3.0.3",
  "info": {
    "title": "To-Do List API",
    "version": "1.0.0",
    "description": "\nA comprehensive RESTful API for managing to-do lists and tasks built with TypeScript, Express.js, and layered architecture.\n\n## Features\n- **Lists Management**: Create, read, update, and delete to-do lists\n- **Tasks Management**: Full CRUD operations for tasks within lists\n- **Task Completion**: Toggle task completion status with automatic timestamps\n- **Deadline Management**: Set and query tasks by deadlines\n- **Sorting & Filtering**: Sort tasks by various criteria and filter by completion status\n- **Data Validation**: Comprehensive input validation using Joi schemas\n- **Error Handling**: Structured error responses with proper HTTP status codes\n- **Memory Storage**: In-memory repository for development (Oracle support planned)\n\n## Architecture\nThe API follows a clean layered architecture:\n- **API Layer**: HTTP request/response handling and routing\n- **Service Layer**: Business logic and validation\n- **Repository Layer**: Data persistence with pluggable storage backends\n\n## Response Format\nAll API endpoints return responses in a consistent format:\n```json\n{\n  \"success\": true,\n  \"data\": { ... },\n  \"meta\": { ... }\n}\n```\n\nFor errors:\n```json\n{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"ERROR_CODE\",\n    \"message\": \"Human readable message\",\n    \"details\": { ... },\n    \"timestamp\": \"2025-07-04T10:00:00.000Z\"\n  }\n}\n```\n        ",
    "contact": {
      "name": "API Support",
      "email": "support@todolist-api.com",
      "url": "https://github.com/your-org/todolist-api"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000/api",
      "description": "Development server"
    },
    {
      "url": "https://api.todolist.com/api",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "Health",
      "description": "System health and status endpoints"
    },
    {
      "name": "Lists",
      "description": "To-do list management operations"
    },
    {
      "name": "Tasks",
      "description": "Task management operations within lists"
    }
  ],
  "components": {
    "schemas": {
      "List": {
        "type": "object",
        "required": ["id", "name", "createdAt", "updatedAt"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the list (UUID v4)",
            "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "Name of the list (1-100 characters)",
            "example": "Work Tasks"
          },
          "description": {
            "type": "string",
            "maxLength": 500,
            "description": "Optional description of the list (max 500 characters)",
            "example": "Tasks related to work and professional development",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the list was created",
            "example": "2025-07-04T10:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the list was last updated",
            "example": "2025-07-04T10:30:00.000Z"
          },
          "taskCount": {
            "type": "integer",
            "minimum": 0,
            "description": "Computed field: number of tasks in this list",
            "example": 5,
            "nullable": true
          }
        }
      },
      "Task": {
        "type": "object",
        "required": ["id", "listId", "title", "completed", "createdAt", "updatedAt"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the task (UUID v4)",
            "example": "b2c3d4e5-f6a7-8901-bcde-f23456789012"
          },
          "listId": {
            "type": "string",
            "format": "uuid",
            "description": "Foreign key reference to the parent list",
            "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200,
            "description": "Title of the task (1-200 characters)",
            "example": "Complete API documentation"
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "description": "Optional detailed description of the task (max 1000 characters)",
            "example": "Write comprehensive Swagger documentation for all API endpoints",
            "nullable": true
          },
          "deadline": {
            "type": "string",
            "format": "date-time",
            "description": "Optional deadline for the task (must be a future date when setting)",
            "example": "2025-07-10T17:00:00.000Z",
            "nullable": true
          },
          "completed": {
            "type": "boolean",
            "description": "Whether the task has been completed",
            "example": false,
            "default": false
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the task was marked as completed (only set when completed = true)",
            "example": "2025-07-04T15:30:00.000Z",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the task was created",
            "example": "2025-07-04T10:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the task was last updated",
            "example": "2025-07-04T15:30:00.000Z"
          }
        }
      },
      "CreateListRequest": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "Name of the list (1-100 characters)",
            "example": "Personal Tasks"
          },
          "description": {
            "type": "string",
            "maxLength": 500,
            "description": "Optional description of the list (max 500 characters)",
            "example": "Personal tasks and household chores",
            "nullable": true
          }
        }
      },
      "UpdateListRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "Name of the list (1-100 characters)",
            "example": "Updated Personal Tasks"
          },
          "description": {
            "type": "string",
            "maxLength": 500,
            "description": "Optional description of the list (max 500 characters)",
            "example": "Updated description for personal tasks",
            "nullable": true
          }
        }
      },
      "CreateTaskRequest": {
        "type": "object",
        "required": ["title"],
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200,
            "description": "Title of the task (1-200 characters)",
            "example": "Buy groceries"
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "description": "Optional detailed description of the task (max 1000 characters)",
            "example": "Buy milk, bread, eggs, and vegetables from the local supermarket",
            "nullable": true
          },
          "deadline": {
            "type": "string",
            "format": "date-time",
            "description": "Optional deadline for the task (must be a future date)",
            "example": "2025-07-05T18:00:00.000Z",
            "nullable": true
          }
        }
      },
      "UpdateTaskRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200,
            "description": "Title of the task (1-200 characters)",
            "example": "Buy organic groceries"
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "description": "Optional detailed description of the task (max 1000 characters)",
            "example": "Buy organic milk, whole grain bread, free-range eggs, and fresh vegetables",
            "nullable": true
          },
          "deadline": {
            "type": "string",
            "format": "date-time",
            "description": "Optional deadline for the task (must be a future date)",
            "example": "2025-07-06T18:00:00.000Z",
            "nullable": true
          },
          "completed": {
            "type": "boolean",
            "description": "Whether the task has been completed",
            "example": true
          }
        }
      },
      "ApiResponse": {
        "type": "object",
        "required": ["success"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful",
            "example": true
          },
          "data": {
            "description": "Response data (only present on successful requests)",
            "nullable": true
          },
          "error": {
            "$ref": "#/components/schemas/ApiError",
            "description": "Error information (only present on failed requests)"
          },
          "meta": {
            "$ref": "#/components/schemas/ApiMeta",
            "description": "Optional metadata about the response"
          }
        }
      },
      "ApiError": {
        "type": "object",
        "required": ["code", "message", "timestamp"],
        "properties": {
          "code": {
            "type": "string",
            "description": "Error code for programmatic handling",
            "example": "VALIDATION_ERROR"
          },
          "message": {
            "type": "string",
            "description": "Human-readable error message",
            "example": "The provided data is invalid"
          },
          "details": {
            "description": "Additional error details (validation errors, etc.)",
            "example": {
              "field": "name",
              "constraint": "minLength",
              "value": ""
            },
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Request timestamp when error occurred",
            "example": "2025-07-04T10:00:00.000Z"
          }
        }
      },
      "ApiMeta": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of items (for paginated responses)",
            "example": 25
          },
          "page": {
            "type": "integer",
            "minimum": 1,
            "description": "Current page number (for paginated responses)",
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "minimum": 1,
            "description": "Number of items per page (for paginated responses)",
            "example": 10
          },
          "hasMore": {
            "type": "boolean",
            "description": "Whether there are more pages available (for paginated responses)",
            "example": true
          }
        }
      },
      "HealthStatus": {
        "type": "object",
        "required": ["status", "timestamp"],
        "properties": {
          "status": {
            "type": "string",
            "enum": ["healthy", "degraded", "unhealthy"],
            "description": "Overall system health status",
            "example": "healthy"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the health check",
            "example": "2025-07-04T10:00:00.000Z"
          },
          "version": {
            "type": "string",
            "description": "API version",
            "example": "1.0.0"
          },
          "uptime": {
            "type": "number",
            "description": "Server uptime in seconds",
            "example": 3600.5
          },
          "environment": {
            "type": "string",
            "description": "Current environment",
            "example": "development"
          }
        }
      },
      "DetailedHealthStatus": {
        "type": "object",
        "required": ["status", "timestamp", "checks"],
        "properties": {
          "status": {
            "type": "string",
            "enum": ["healthy", "degraded", "unhealthy"],
            "description": "Overall system health status",
            "example": "healthy"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the health check",
            "example": "2025-07-04T10:00:00.000Z"
          },
          "version": {
            "type": "string",
            "description": "API version",
            "example": "1.0.0"
          },
          "uptime": {
            "type": "number",
            "description": "Server uptime in seconds",
            "example": 3600.5
          },
          "environment": {
            "type": "string",
            "description": "Current environment",
            "example": "development"
          },
          "checks": {
            "type": "object",
            "description": "Individual component health checks",
            "properties": {
              "memory": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "example": "healthy"
                  },
                  "responseTime": {
                    "type": "number",
                    "example": 1.2
                  },
                  "details": {
                    "type": "object"
                  }
                }
              },
              "storage": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "example": "healthy"
                  },
                  "responseTime": {
                    "type": "number",
                    "example": 2.5
                  },
                  "details": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "parameters": {
      "ListId": {
        "name": "listId",
        "in": "path",
        "required": true,
        "description": "Unique identifier of the list",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        }
      },
      "TaskId": {
        "name": "taskId",
        "in": "path",
        "required": true,
        "description": "Unique identifier of the task",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "b2c3d4e5-f6a7-8901-bcde-f23456789012"
        }
      },
      "IncludeTaskCount": {
        "name": "includeTaskCount",
        "in": "query",
        "description": "Whether to include task count in list responses",
        "schema": {
          "type": "boolean",
          "default": true,
          "example": true
        }
      },
      "SortBy": {
        "name": "sortBy",
        "in": "query",
        "description": "Field to sort tasks by",
        "schema": {
          "type": "string",
          "enum": ["createdAt", "updatedAt", "deadline", "title", "completed"],
          "default": "createdAt",
          "example": "deadline"
        }
      },
      "SortOrder": {
        "name": "order",
        "in": "query",
        "description": "Sort order (ascending or descending)",
        "schema": {
          "type": "string",
          "enum": ["asc", "desc"],
          "default": "desc",
          "example": "asc"
        }
      },
      "IncludeCompleted": {
        "name": "includeCompleted",
        "in": "query",
        "description": "Whether to include completed tasks in results",
        "schema": {
          "type": "boolean",
          "default": true,
          "example": false
        }
      }
    },
    "responses": {
      "ValidationError": {
        "description": "Validation error - invalid request data",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "example": "VALIDATION_ERROR"
                        },
                        "message": {
                          "type": "string",
                          "example": "Request data validation failed"
                        },
                        "details": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "field": {
                                "type": "string",
                                "example": "name"
                              },
                              "message": {
                                "type": "string",
                                "example": "Name is required"
                              }
                            }
                          }
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "example": "NOT_FOUND"
                        },
                        "message": {
                          "type": "string",
                          "example": "The requested resource was not found"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "example": "INTERNAL_ERROR"
                        },
                        "message": {
                          "type": "string",
                          "example": "An internal server error occurred"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      }
    }
  },
  "paths": {
    "/api/lists": {
      "get": {
        "summary": "Get all lists",
        "description": "Retrieves all lists with optional task counts",
        "tags": ["Lists"],
        "parameters": [
          {
            "in": "query",
            "name": "includeTaskCount",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Whether to include task counts for each list"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all lists retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/List"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "example": 3
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new list",
        "description": "Creates a new list with the provided data",
        "tags": ["Lists"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateListRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "List created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/List"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error or duplicate name",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity - validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/lists/{id}": {
      "get": {
        "summary": "Get a specific list by ID",
        "description": "Retrieves a specific list by its unique identifier",
        "tags": ["Lists"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The list ID"
          },
          {
            "in": "query",
            "name": "includeTaskCount",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Whether to include task count for the list"
          }
        ],
        "responses": {
          "200": {
            "description": "List retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/List"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid UUID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "List not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a specific list",
        "description": "Updates an existing list with the provided data",
        "tags": ["Lists"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The list ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateListRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/List"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error or duplicate name",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "List not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity - validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a specific list",
        "description": "Deletes a list and all its associated tasks (cascade delete)",
        "tags": ["Lists"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The list ID"
          }
        ],
        "responses": {
          "204": {
            "description": "List deleted successfully"
          },
          "400": {
            "description": "Bad request - invalid UUID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "List not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/lists/{listId}/tasks": {
      "post": {
        "summary": "Create a new task in a list",
        "description": "Creates a new task within the specified list",
        "tags": ["Tasks"],
        "parameters": [
          {
            "in": "path",
            "name": "listId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the list to add the task to"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title"],
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 200,
                    "description": "Title of the task"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "description": "Optional description of the task"
                  },
                  "deadline": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Optional deadline for the task (future date)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Task"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "List not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get tasks for a specific list",
        "description": "Retrieves all tasks belonging to the specified list with optional filtering and sorting",
        "tags": ["Tasks"],
        "parameters": [
          {
            "in": "path",
            "name": "listId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The list ID"
          },
          {
            "in": "query",
            "name": "includeCompleted",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Whether to include completed tasks"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": ["title", "createdAt", "updatedAt", "deadline"],
              "default": "createdAt"
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "Tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Task"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "example": 5
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid UUID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "List not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks": {
      "get": {
        "summary": "Get all tasks with optional filters",
        "description": "Retrieves all tasks with optional filtering and sorting",
        "tags": ["Tasks"],
        "parameters": [
          {
            "in": "query",
            "name": "listId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter tasks by list ID"
          },
          {
            "in": "query",
            "name": "completed",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Filter tasks by completion status"
          },
          {
            "in": "query",
            "name": "includeCompleted",
            "schema": {
              "type": "boolean",
              "enum": ["title", "deadline", "createdAt", "updatedAt"],
              "default": true
            },
            "description": "Whether to include completed tasks"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": ["title", "createdAt", "updatedAt", "deadline"],
              "default": "createdAt"
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            },
            "description": "Sort order"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of tasks to return"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of tasks to skip"
          },
          {
            "in": "query",
            "name": "deadlineFrom",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter tasks with deadline from this date"
          },
          {
            "in": "query",
            "name": "deadlineTo",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter tasks with deadline until this date"
          }
        ],
        "responses": {
          "200": {
            "description": "Tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Task"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "example": 5
                        },
                        "limit": {
                          "type": "number",
                          "example": 10
                        },
                        "offset": {
                          "type": "number",
                          "example": 0
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new task",
        "tags": ["Tasks"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Task"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error"
          },
          "404": {
            "description": "List not found"
          },
          "422": {
            "description": "Unprocessable entity - validation errors"
          }
        }
      }
    },
    "/api/tasks/{taskId}": {
      "put": {
        "summary": "Update a task",
        "description": "Updates an existing task with new data",
        "tags": ["Tasks"],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the task to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 200,
                    "description": "Updated title of the task"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "description": "Updated description of the task"
                  },
                  "deadline": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Updated deadline for the task"
                  },
                  "completed": {
                    "type": "boolean",
                    "description": "Updated completion status"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Task"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a task",
        "description": "Deletes an existing task",
        "tags": ["Tasks"],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the task to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Task deleted successfully"
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/{taskId}/toggle-completion": {
      "patch": {
        "summary": "Toggle task completion status",
        "description": "Toggles the completion status of a task (completed <-> incomplete)",
        "tags": ["Tasks"],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the task to toggle"
          }
        ],
        "responses": {
          "200": {
            "description": "Task completion status toggled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Task"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/due-this-week": {
      "get": {
        "summary": "Get tasks due this week",
        "description": "Retrieves all tasks that have deadlines within the current week (Monday to Sunday)",
        "tags": ["Tasks"],
        "parameters": [
          {
            "in": "query",
            "name": "listId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter tasks by list ID"
          },
          {
            "in": "query",
            "name": "includeCompleted",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Whether to include completed tasks"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": ["title", "deadline", "createdAt", "updatedAt"],
              "default": "deadline"
            },
            "description": "Field to sort tasks by"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "asc"
            },
            "description": "Sort order direction"
          }
        ],
        "responses": {
          "200": {
            "description": "Tasks due this week retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Task"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "example": 3
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health check endpoint",
        "description": "Returns the current health status of the API",
        "tags": ["Health"],
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "healthy"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "uptime": {
                          "type": "number",
                          "description": "Server uptime in seconds"
                        },
                        "version": {
                          "type": "string",
                          "example": "1.0.0"
                        },
                        "environment": {
                          "type": "string",
                          "example": "development"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/health/ready": {
      "get": {
        "summary": "Readiness check endpoint",
        "description": "Returns whether the service is ready to accept traffic",
        "tags": ["Health"],
        "responses": {
          "200": {
            "description": "Service is ready",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "ready": {
                          "type": "boolean",
                          "example": true
                        },
                        "checks": {
                          "type": "object",
                          "properties": {
                            "database": {
                              "type": "string",
                              "example": "ok"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service is not ready"
          }
        }
      }
    },
    "/health/live": {
      "get": {
        "summary": "Liveness check endpoint",
        "description": "Returns whether the service is alive (for Kubernetes liveness probe)",
        "tags": ["Health"],
        "responses": {
          "200": {
            "description": "Service is alive",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "alive": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/lists/{listId}/tasks": {
      "post": {
        "summary": "Create a new task in a specific list",
        "description": "Creates a new task within the specified list (alternative to POST /tasks with listId in body)",
        "tags": ["Tasks"],
        "parameters": [
          {
            "in": "path",
            "name": "listId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the list to add the task to"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title"],
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 200,
                    "description": "Title of the task"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "description": "Optional description of the task"
                  },
                  "deadline": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Optional deadline for the task (future date)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully"
          },
          "400": {
            "description": "Bad request - validation error"
          },
          "404": {
            "description": "List not found"
          }
        }
      }
    },
    "/api/tasks/{id}": {
      "put": {
        "summary": "Update a specific task",
        "tags": ["Tasks"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The task ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Task"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error"
          },
          "404": {
            "description": "Task not found"
          },
          "422": {
            "description": "Unprocessable entity - validation errors"
          }
        }
      },
      "delete": {
        "summary": "Delete a specific task",
        "tags": ["Tasks"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The task ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Task deleted successfully"
          },
          "400": {
            "description": "Bad request - invalid UUID format"
          },
          "404": {
            "description": "Task not found"
          }
        }
      }
    },
    "/api/tasks/{id}/toggle": {
      "patch": {
        "summary": "Toggle task completion status",
        "tags": ["Tasks"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The task ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Task completion status toggled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Task"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid UUID format"
          },
          "404": {
            "description": "Task not found"
          }
        }
      }
    }
  }
}
